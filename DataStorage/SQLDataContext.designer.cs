#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RightEdge.DataStorage
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="RIGHTEDGE_DATA")]
	public partial class SQLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDBBar(DBBar instance);
    partial void UpdateDBBar(DBBar instance);
    partial void DeleteDBBar(DBBar instance);
    partial void InsertDBSymbol(DBSymbol instance);
    partial void UpdateDBSymbol(DBSymbol instance);
    partial void DeleteDBSymbol(DBSymbol instance);
    partial void InsertDBTick(DBTick instance);
    partial void UpdateDBTick(DBTick instance);
    partial void DeleteDBTick(DBTick instance);
    #endregion
		
		public SQLDataContext() : 
				base(global::RightEdge.DataStorage.Properties.Settings.Default.RIGHTEDGE_DATAConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SQLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DBBar> DBBars
		{
			get
			{
				return this.GetTable<DBBar>();
			}
		}
		
		public System.Data.Linq.Table<DBSymbol> DBSymbols
		{
			get
			{
				return this.GetTable<DBSymbol>();
			}
		}
		
		public System.Data.Linq.Table<DBTick> DBTicks
		{
			get
			{
				return this.GetTable<DBTick>();
			}
		}
		
		[Function(Name="dbo.DeleteBars")]
		public int DeleteBars([Parameter(Name="SymbolGuid", DbType="UniqueIdentifier")] System.Nullable<System.Guid> symbolGuid, [Parameter(Name="Frequency", DbType="Int")] System.Nullable<int> frequency, [Parameter(Name="Start", DbType="DateTime")] System.Nullable<System.DateTime> start, [Parameter(Name="End", DbType="DateTime")] System.Nullable<System.DateTime> end)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), symbolGuid, frequency, start, end);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.DeleteTicks")]
		public int DeleteTicks([Parameter(Name="SymbolGuid", DbType="UniqueIdentifier")] System.Nullable<System.Guid> symbolGuid, [Parameter(Name="Start", DbType="DateTime")] System.Nullable<System.DateTime> start, [Parameter(Name="End", DbType="DateTime")] System.Nullable<System.DateTime> end)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), symbolGuid, start, end);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Bar")]
	public partial class DBBar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SymbolGuid;
		
		private int _Frequency;
		
		private System.DateTime _BarStartTime;
		
		private int _Order;
		
		private double _Open;
		
		private double _Close;
		
		private double _High;
		
		private double _Low;
		
		private double _Bid;
		
		private double _Ask;
		
		private long _Volume;
		
		private int _OpenInterest;
		
		private bool _EmptyBar;
		
		private EntityRef<DBSymbol> _DBSymbol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSymbolGuidChanging(System.Guid value);
    partial void OnSymbolGuidChanged();
    partial void OnFrequencyChanging(int value);
    partial void OnFrequencyChanged();
    partial void OnBarStartTimeChanging(System.DateTime value);
    partial void OnBarStartTimeChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnOpenChanging(double value);
    partial void OnOpenChanged();
    partial void OnCloseChanging(double value);
    partial void OnCloseChanged();
    partial void OnHighChanging(double value);
    partial void OnHighChanged();
    partial void OnLowChanging(double value);
    partial void OnLowChanged();
    partial void OnBidChanging(double value);
    partial void OnBidChanged();
    partial void OnAskChanging(double value);
    partial void OnAskChanged();
    partial void OnVolumeChanging(long value);
    partial void OnVolumeChanged();
    partial void OnOpenInterestChanging(int value);
    partial void OnOpenInterestChanged();
    partial void OnEmptyBarChanging(bool value);
    partial void OnEmptyBarChanged();
    #endregion
		
		public DBBar()
		{
			this._DBSymbol = default(EntityRef<DBSymbol>);
			OnCreated();
		}
		
		[Column(Storage="_SymbolGuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SymbolGuid
		{
			get
			{
				return this._SymbolGuid;
			}
			set
			{
				if ((this._SymbolGuid != value))
				{
					if (this._DBSymbol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSymbolGuidChanging(value);
					this.SendPropertyChanging();
					this._SymbolGuid = value;
					this.SendPropertyChanged("SymbolGuid");
					this.OnSymbolGuidChanged();
				}
			}
		}
		
		[Column(Storage="_Frequency", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[Column(Storage="_BarStartTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime BarStartTime
		{
			get
			{
				return this._BarStartTime;
			}
			set
			{
				if ((this._BarStartTime != value))
				{
					this.OnBarStartTimeChanging(value);
					this.SendPropertyChanging();
					this._BarStartTime = value;
					this.SendPropertyChanged("BarStartTime");
					this.OnBarStartTimeChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Name="[Open]", Storage="_Open", DbType="Float NOT NULL")]
		public double Open
		{
			get
			{
				return this._Open;
			}
			set
			{
				if ((this._Open != value))
				{
					this.OnOpenChanging(value);
					this.SendPropertyChanging();
					this._Open = value;
					this.SendPropertyChanged("Open");
					this.OnOpenChanged();
				}
			}
		}
		
		[Column(Name="[Close]", Storage="_Close", DbType="Float NOT NULL")]
		public double Close
		{
			get
			{
				return this._Close;
			}
			set
			{
				if ((this._Close != value))
				{
					this.OnCloseChanging(value);
					this.SendPropertyChanging();
					this._Close = value;
					this.SendPropertyChanged("Close");
					this.OnCloseChanged();
				}
			}
		}
		
		[Column(Storage="_High", DbType="Float NOT NULL")]
		public double High
		{
			get
			{
				return this._High;
			}
			set
			{
				if ((this._High != value))
				{
					this.OnHighChanging(value);
					this.SendPropertyChanging();
					this._High = value;
					this.SendPropertyChanged("High");
					this.OnHighChanged();
				}
			}
		}
		
		[Column(Storage="_Low", DbType="Float NOT NULL")]
		public double Low
		{
			get
			{
				return this._Low;
			}
			set
			{
				if ((this._Low != value))
				{
					this.OnLowChanging(value);
					this.SendPropertyChanging();
					this._Low = value;
					this.SendPropertyChanged("Low");
					this.OnLowChanged();
				}
			}
		}
		
		[Column(Storage="_Bid", DbType="Float NOT NULL")]
		public double Bid
		{
			get
			{
				return this._Bid;
			}
			set
			{
				if ((this._Bid != value))
				{
					this.OnBidChanging(value);
					this.SendPropertyChanging();
					this._Bid = value;
					this.SendPropertyChanged("Bid");
					this.OnBidChanged();
				}
			}
		}
		
		[Column(Storage="_Ask", DbType="Float NOT NULL")]
		public double Ask
		{
			get
			{
				return this._Ask;
			}
			set
			{
				if ((this._Ask != value))
				{
					this.OnAskChanging(value);
					this.SendPropertyChanging();
					this._Ask = value;
					this.SendPropertyChanged("Ask");
					this.OnAskChanged();
				}
			}
		}
		
		[Column(Storage="_Volume", DbType="BigInt NOT NULL")]
		public long Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[Column(Storage="_OpenInterest", DbType="Int NOT NULL")]
		public int OpenInterest
		{
			get
			{
				return this._OpenInterest;
			}
			set
			{
				if ((this._OpenInterest != value))
				{
					this.OnOpenInterestChanging(value);
					this.SendPropertyChanging();
					this._OpenInterest = value;
					this.SendPropertyChanged("OpenInterest");
					this.OnOpenInterestChanged();
				}
			}
		}
		
		[Column(Storage="_EmptyBar", DbType="Bit NOT NULL")]
		public bool EmptyBar
		{
			get
			{
				return this._EmptyBar;
			}
			set
			{
				if ((this._EmptyBar != value))
				{
					this.OnEmptyBarChanging(value);
					this.SendPropertyChanging();
					this._EmptyBar = value;
					this.SendPropertyChanged("EmptyBar");
					this.OnEmptyBarChanged();
				}
			}
		}
		
		[Association(Name="DBSymbol_DBBar", Storage="_DBSymbol", ThisKey="SymbolGuid", OtherKey="SymbolGuid", IsForeignKey=true)]
		public DBSymbol DBSymbol
		{
			get
			{
				return this._DBSymbol.Entity;
			}
			set
			{
				DBSymbol previousValue = this._DBSymbol.Entity;
				if (((previousValue != value) 
							|| (this._DBSymbol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBSymbol.Entity = null;
						previousValue.DBBars.Remove(this);
					}
					this._DBSymbol.Entity = value;
					if ((value != null))
					{
						value.DBBars.Add(this);
						this._SymbolGuid = value.SymbolGuid;
					}
					else
					{
						this._SymbolGuid = default(System.Guid);
					}
					this.SendPropertyChanged("DBSymbol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Symbol")]
	public partial class DBSymbol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SymbolGuid;
		
		private string _SymbolUniqueID;
		
		private EntitySet<DBBar> _DBBars;
		
		private EntitySet<DBTick> _DBTicks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSymbolGuidChanging(System.Guid value);
    partial void OnSymbolGuidChanged();
    partial void OnSymbolUniqueIDChanging(string value);
    partial void OnSymbolUniqueIDChanged();
    #endregion
		
		public DBSymbol()
		{
			this._DBBars = new EntitySet<DBBar>(new Action<DBBar>(this.attach_DBBars), new Action<DBBar>(this.detach_DBBars));
			this._DBTicks = new EntitySet<DBTick>(new Action<DBTick>(this.attach_DBTicks), new Action<DBTick>(this.detach_DBTicks));
			OnCreated();
		}
		
		[Column(Storage="_SymbolGuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SymbolGuid
		{
			get
			{
				return this._SymbolGuid;
			}
			set
			{
				if ((this._SymbolGuid != value))
				{
					this.OnSymbolGuidChanging(value);
					this.SendPropertyChanging();
					this._SymbolGuid = value;
					this.SendPropertyChanged("SymbolGuid");
					this.OnSymbolGuidChanged();
				}
			}
		}
		
		[Column(Storage="_SymbolUniqueID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SymbolUniqueID
		{
			get
			{
				return this._SymbolUniqueID;
			}
			set
			{
				if ((this._SymbolUniqueID != value))
				{
					this.OnSymbolUniqueIDChanging(value);
					this.SendPropertyChanging();
					this._SymbolUniqueID = value;
					this.SendPropertyChanged("SymbolUniqueID");
					this.OnSymbolUniqueIDChanged();
				}
			}
		}
		
		[Association(Name="DBSymbol_DBBar", Storage="_DBBars", ThisKey="SymbolGuid", OtherKey="SymbolGuid")]
		public EntitySet<DBBar> DBBars
		{
			get
			{
				return this._DBBars;
			}
			set
			{
				this._DBBars.Assign(value);
			}
		}
		
		[Association(Name="DBSymbol_Tick", Storage="_DBTicks", ThisKey="SymbolGuid", OtherKey="SymbolGuid")]
		public EntitySet<DBTick> DBTicks
		{
			get
			{
				return this._DBTicks;
			}
			set
			{
				this._DBTicks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DBBars(DBBar entity)
		{
			this.SendPropertyChanging();
			entity.DBSymbol = this;
		}
		
		private void detach_DBBars(DBBar entity)
		{
			this.SendPropertyChanging();
			entity.DBSymbol = null;
		}
		
		private void attach_DBTicks(DBTick entity)
		{
			this.SendPropertyChanging();
			entity.DBSymbol = this;
		}
		
		private void detach_DBTicks(DBTick entity)
		{
			this.SendPropertyChanging();
			entity.DBSymbol = null;
		}
	}
	
	[Table(Name="dbo.Tick")]
	public partial class DBTick : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SymbolGuid;
		
		private System.DateTime _Time;
		
		private int _Order;
		
		private int _TickType;
		
		private double _Price;
		
		private long _Size;
		
		private EntityRef<DBSymbol> _DBSymbol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSymbolGuidChanging(System.Guid value);
    partial void OnSymbolGuidChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    partial void OnTickTypeChanging(int value);
    partial void OnTickTypeChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnSizeChanging(long value);
    partial void OnSizeChanged();
    #endregion
		
		public DBTick()
		{
			this._DBSymbol = default(EntityRef<DBSymbol>);
			OnCreated();
		}
		
		[Column(Storage="_SymbolGuid", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SymbolGuid
		{
			get
			{
				return this._SymbolGuid;
			}
			set
			{
				if ((this._SymbolGuid != value))
				{
					if (this._DBSymbol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSymbolGuidChanging(value);
					this.SendPropertyChanging();
					this._SymbolGuid = value;
					this.SendPropertyChanged("SymbolGuid");
					this.OnSymbolGuidChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_TickType", DbType="Int NOT NULL")]
		public int TickType
		{
			get
			{
				return this._TickType;
			}
			set
			{
				if ((this._TickType != value))
				{
					this.OnTickTypeChanging(value);
					this.SendPropertyChanging();
					this._TickType = value;
					this.SendPropertyChanged("TickType");
					this.OnTickTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="BigInt NOT NULL")]
		public long Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Association(Name="DBSymbol_Tick", Storage="_DBSymbol", ThisKey="SymbolGuid", OtherKey="SymbolGuid", IsForeignKey=true)]
		public DBSymbol DBSymbol
		{
			get
			{
				return this._DBSymbol.Entity;
			}
			set
			{
				DBSymbol previousValue = this._DBSymbol.Entity;
				if (((previousValue != value) 
							|| (this._DBSymbol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBSymbol.Entity = null;
						previousValue.DBTicks.Remove(this);
					}
					this._DBSymbol.Entity = value;
					if ((value != null))
					{
						value.DBTicks.Add(this);
						this._SymbolGuid = value.SymbolGuid;
					}
					else
					{
						this._SymbolGuid = default(System.Guid);
					}
					this.SendPropertyChanged("DBSymbol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
